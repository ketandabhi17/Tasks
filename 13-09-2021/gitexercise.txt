
Exercise 1: master
$> git start
$> git verify

Exercise 2: commit-one-file
$> git add A.txt
# or 
$> git add B.txt
$> git commit -m "add one file"
$> git verify

Exercise 3: commit-one-file-staged
$> git reset HEAD A.txt
# or
$> git reset HEAD B.txt
$> git commit -m "destage one file"
$> git verify

Exercise 4: ignore-them
$> nano .gitignore
*.exe
*.o
*.jar
libraries/
$> git add .
$> git commit -m "commit useful files"
$> git verify

Exercise 5: chase-branch
$> git checkout chase-branch
$> git merge escaped
$> git verify

Exercise 6: merge-conflict
$> git checkout merge-conflict
$> git merge another-piece-of-work
$> nano equation.txt

2 + 3 = 5

$> git add equation.txt
$> git commit -m "merge and resolve"
$> git verify

Exercise 7: save-your-work
$> git stash
# or
$> git stash push
$> nano bug.txt # in the text editor delete the bud line
$> git commit -am "remove bug"
$> git stash apply
# or
$> git stash apply stash@{0}
$> nano bug.txt # in the text editor add the line "Finally, finished it!" to the end
$> git commit -am "finish"
$> git verify

Exercise 8: change-branch-history
$> git checkout change-branch-history
$> git rebase hot-bugfix
$> git verify

Exercise 9: remove-ignored
$> git rm --cached ignored.txt
$> git commit -am "untrack ignored.txt"
$> git verify

Exercise 10: case-sensitive-filename
$> git reset HEAD^
$> mv File.txt file.txt
$> git add file.txt
$> git commit -m "lowercase filename"
$> git verify

Exercise 11: fix-typo
# fix typo in the file
$> git commit -a --amend
# fix the typo in commit message
$> git verify

Exercise 12: forge-date (most useless exercise, but shows that git is not a monolith)
$> git commit --amend --no-edit --date="1987-08-03"

Exercise 13: fix-old-typo
$> git rebase -i HEAD^^
# change "pick" to "edit" where the typo is in the commit message
# fix the typo in the file
$> git add file.txt
$> git rebase --continue
# fix the rebase conflict
$> git add file.txt
$> git reabse --continue
$> git verify

Exercise 14: commit-lost
$> git reflog
$> git reset --hard HEAD@{1}
$> git verify

Exercise 15: split-commit
$> git reset HEAD^
$> git add first.txt
$> git commit -m "First.txt"
$> git add second.txt
$> git commit -m "Second.txt"
$> git verify

Exercise 16: too-many-commits
$> git rebase -i HEAD~4
# replace "pick" with "squash" for the commit with the message "Crap, I have forgotten to add this line." 
# leave a commit message same as the one with which the marked commit is getting squashed with i.e.,
# "Add file.txt"
$> git verify

Exercise 17: executable
$> git update-index --chmod=+x script.sh
$> git commit -m "make executable"
$> git verify

Exercise 18: commit-parts
git add -p file.txt
# choose lines to include with 'y'
git commit -m "First part of changes"
git commit -am "The rest of the changed"

Exercise 19: pick-your-features
$> git log --oneline --decorate --graph --all -8
$> git checkout pick-your-features
$> git cherry-pick feature-a 
$> git cherry-pick feature-b 
$> git merge --squash feature-c
# resolve conflict
$> git commit -am "Complete Feature C"
$> git verify

Exercise 20: reabse-complex
$> git rebase --onto your-master issue-555 rebase-complex 
$> git verify

Exercise 21: invalid-order

$> git rebase -i HEAD~4
# reorder the commit messages as needed
$> git verify

Exercise 22: find-swearwords

$> git log -S shit
# make a note of the commits where a word "shit" was introduced
$> git rebase -i HEAD~105
# replace 'pick' with 'edit' for those commits

# check which files were modified
$> git log -p -1
# replace 'shit' with 'flower' in list.txt
$> git add list.txt
$> git commit --amend
$> git rebase --continue

# check which files were modified
$> git log -p -1
# replace 'shit' with 'flower' in words.txt
$> git add words.txt
$> git commit --amend
$> git rebase --continue

# check which files were modified
$> git log -p -1
# replace 'shit' with 'flower' in words.txt
$> git add words.txt
$> git commit --amend
$> git rebase --continue

$> git verify

Exercise 23: find-bug
$> git checkout find-bug
$> git bisect start
$> git bisect bad
$> git bisect good 1.0
$> git bisect run sh -c "openssl enc -base64 -A -d < home-screen-text.txt | grep -v jackass"
$> git push origin 4d2725ac4c874dbb207770001def27aed48e9ddb:find-bug


